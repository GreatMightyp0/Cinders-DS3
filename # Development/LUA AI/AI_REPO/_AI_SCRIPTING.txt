#-----------------------------
# Commands
#-----------------------------
Capitalized arguments mean the value is an enum found in a list file such as ai_define.

#------------------------------------------------------
# AI
#------------------------------------------------------
 # Add sub goal to goal list
 AddSubGoal( <based on goal> )
    GOAL_COMMON_AttackTunableSpin: 
        # Standard attack
        <goal>, <duration>, <animation>, <target>, <max_attack_distance>, <spin_time>, <turn_success_angle>
    GOAL_COMMON_Wait: 
        # Used to wait for a period of time
        <goal>, <duration>, <target>, <max_attack_distance>, <spin_time>, <turn_success_angle>
    GOAL_COMMON_ComboTunable_SuccessAngle180: 
        # Allows attack no matter orientation 
        <goal>, <duration>, <animation>, <target>, <max_attack_distance>, <spin_time>, <turn_success_angle>
    GOAL_COMMON_SidewayMove:
        # Used for movement in stance
        <goal>, <duration>, <target>, <?>, <?>, <bool?>, <bool?>, <animation>
    GOAL_COMMON_ApproachTarget
        # Used for approaching a target
        <goal>, <duration>, <enemy target>, <max_attack_distance>, <self target>, <isWalk>, <animation>
    GOAL_COMMON_DashTarget
        # Used for dashing to a target
        <goal>, <duration>, <enemy target>, <max_attack_distance>, <self target>, <?>
    GOAL_COMMON_NPCStepAttack
        # Used for rolling attacks
        <goal>, <duration>, <target>, <max_attack_distance>, <spin_time>, <turn_success_angle>
        
 <max_attack_distance>:  Maximum distance at which the attack can be used
 <spin_time>:            Time allowed for the entity to turn
 <turn_success_angle>:   The facing angle the target must be within
 
 # Clear sub goal
 ClearSubGoal()
 
 # Add top goal to goal list
 AddTopGoal( <GOAL>, <uint>, <animation ID>, <TARGET>, <ufloat>, <uint>, <uint>, <uint>, <uint>)
 
 # Check if goal is in list
 HasGoal( <GOAL> )
 
 # Check if goal is active
 IsActiveGoal( <GOAL> )
 
 # Turn to target
 TurnTo( <TARGET> )
 
 # Replan 
 Replaning()
 
 # Get number of sub goals
 GetSubGoalNum()
 
 # Get duration of AI life
 GetLife()
 
 # Get param via index
 GetParam( <index> )
 
 # Get distance param
 GetDistParam( <DIST> )
 
 # Check if SpEffect is present
 HasSpecialEffectId( <TARGET>, <SpEffect ID )
  
 # Get AI think param ID
 GetNpcThinkParamID() == <ID>
 
 # Get AI HP %
 GetHpRate( <TARGET> )
 
 # Get AI distance to target
 GetDist( <TARGET> )
 
 # Is in optimal attack range
 IsOptimalAttackDist( <unk>, <unk> )
 
 # Get random int between min and max
 GetRandam_Int( <min>, <max> )
 
 # Get random float between min and max
 GetRandam_Float( <min, <max> )
 
 # Get event request
 GetEventRequest()
 
 # Get field value from param field
 GetExcelParam( <AI_EXCEL_THINK_PARAM_TYPE> )
 
 # Get map hit radius
 GetMapHitRadius( <TARGET> )
 
 # Get angle to target
 GetToTargetAngle( <TARGET> )
 
 # Get relative angle from target
 GetRelativeAngleFromTarget( <TARGET> )
 
 # Get AI angle to target
 IsInsideTarget( <TARGET>, <AI_DIR_TYPE>, <angle> )

 # Check if AI is in pre-defined map region
 IsInsideMsbRegion( <TARGET>, <AI_DIR_TYPE>, <angle>, <event ID> )
 
 # Check if AI in in target region
 IsInsideTargetRegion( <TARGET>, <event ID> )
 
 # Check if AI is on ladder
 IsLadderAct( <TARGET> )
 
 # Get saved number from index
 GetNumber( <index> )
 
 # Save a number to an index
 SetNumber( <index>, <value> )
 
 # 
 GetExistMeshOnLineDistEx( <TARGET>, <AI_DIR_TYPE>, <start distance>, <end distance>, <uint>)
 
 #
 GetExistMeshOnLineDistSpecifyAngleEx( )
 
 # Get if target is within path
 CheckDoesExistPath( <TARGET>, <AI_DIR_TYPE>, <start distance>, <end distance>)
 
 # Set event move target
 SetEventMoveTarget( <event ID> )
 
 # Set string variable
 SetStringIndexedNumber( <string>, <value> )
 
 # Get string variable
 GetStringIndexedNumber( <string> )
 
 # Check if timer with index X has finished
 IsFinishTimer( <index> )
 
 # Set timer to index
 SetTimer( <index>, <time> )
 
 # Check interrupt
 IsInterupt( <INTERUPT> )
 
 # Check if target is within observe area
 IsInsideObserve( <index> )
 
 # Add observe area (a type of interupt)
 AddObserveArea( <index>, <TARGET>, <TARGET>, <AI_DIR_TYPE>, <angle>, <distance>)
 
 # Delete observe area
 DeleteObserve( <index> )
 
 # Add SpEffect monitor
 AddObserveSpecialEffectAttribute( <TARGET>, <SpEffect ID> )
 
 # Delete SpEffect monitor
 DeleteObserveSpecialEffectAttribute( <TARGET>, <SpEffect ID> )
 
 # Get Interrupt based on SpEffect monitor
 GetSpecialEffectActivateInterruptType( <uint> ) == <SpEffect ID>
 
 # 
 IsTargetOutOfRangeInterruptSlot( <index> )
 
 #
 SetTargetRange( <unk>, <unk>, <unk> )
 
 # Get team order
 GetTeamOrder( <ORDER_TYPE> )
 
 # Get team record
 GetTeamRecordCount( <COORDINATE_TYPE>, <unk> )
 
 # 
 GetMemberNum()
 
 # 
 AddGoalScopedTeamRecord( <COORDINATE_TYPE>, <unk>, <unk> )
 
 # Do ezstate action
 DoEzAction( <unk>, <unk> )
 
 # Get latest attacked direction
 GetLatestAttackedDir()
 
 # 
 AfterAction( <unk>, <unk>, <act> )
 
 # Get ID timer
 GetIdTimer( <index> )
 
 # Set ID timer
 StartIdTimer( <index> )
 
 # Is searching for target
 IsSearchTarget( <TARGET> )
 
 # Set attack request
 SetAttackRequest( <value> )
 
 # 
 SetFailedEndOption( <AI_GOAL> )
 
 #
 SetAllowTriggerNearObjAct()
 
 #
 IsExistReqObjAct()
 
 #
 AddLifeParentSubGoal( <float> )
 
 #
 GetDistYSigned( <distance> )
 
 #
 AddCirclePoint( <member>, <TARGET>, <angle>, <unk>, <TEAM_FMT_BASE_DIR> )
 
 #
 AddProcessionPoint( <member>, <TARGET>, <angle>, <unk>, <TEAM_FMT_BASE_DIR> )
 
 # Change equipped item slot
 ChangeEquipItem( <slot> )
 
 # Change equipped magic slot
 ChangeEquipMagic( <slot> )
 
#------------------------------------------------------
# Goal
#------------------------------------------------------
 # 
 SetLifeEndSuccess( <bool> )
 
#---------------------------------------------------
# NPC Attacks
#---------------------------------------------------
NPC_ATK_R1 = 0
NPC_ATK_R1_Hold = 1
NPC_ATK_R2 = 2
NPC_ATK_R2_Hold = 3
NPC_ATK_L1 = 4
NPC_ATK_L1Hold = 6
NPC_ATK_L2 = 7
NPC_ATK_L2Hold = 8
NPC_ATK_L3 = 9
NPC_ATK_Up_R1 = 10
NPC_ATK_Up_R2 = 11
NPC_ATK_ButtonTriangle = 12
NPC_ATK_ButtonSquare = 13
NPC_ATK_ButtonCircle = 14
NPC_ATK_ButtonXmark = 15
NPC_ATK_ArrowKeyLeft = 16
NPC_ATK_ArrowKeyRight = 17
NPC_ATK_Up = 18
NPC_ATK_UpLeft = 19
NPC_ATK_UpRight = 20
NPC_ATK_Left = 21
NPC_ATK_Right = 22
NPC_ATK_Down = 23
NPC_ATK_DownLeft = 24
NPC_ATK_DownRight = 25
NPC_ATK_Up_L1Hold = 26
NPC_ATK_UpLeft_L1Hold = 27
NPC_ATK_UpRight_L1Hold = 28
NPC_ATK_Left_L1Hold = 29
NPC_ATK_Right_L1Hold = 30
NPC_ATK_Down_L1Hold = 31
NPC_ATK_DownLeft_L1Hold = 32
NPC_ATK_DownRight_L1Hold = 33
NPC_ATK_UpHold_ButtonXmarkHold = 34
NPC_ATK_UpHold_ButtonXmarkHold_L2Hold = 35
NPC_ATK_Up_ButtonXmark = 36
NPC_ATK_UpLeft_ButtonXmark = 37
NPC_ATK_UpRight_ButtonXmark = 38
NPC_ATK_Left_ButtonXmark = 39
NPC_ATK_Right_ButtonXmark = 40
NPC_ATK_Down_ButtonXmark = 41
NPC_ATK_DownLeft_ButtonXmark = 42
NPC_ATK_DownRight_ButtonXmark = 43
NPC_ATK_L2Hold_R1 = 48
NPC_ATK_L2Hold_R2 = 49
NPC_ATK_Up_L2 = 50
NPC_ATK_UpLeft_L2 = 51
NPC_ATK_UpRight_L2 = 52
NPC_ATK_Left_L2 = 53
NPC_ATK_Right_L2 = 54
NPC_ATK_Down_L2 = 55
NPC_ATK_DownLeft_L2 = 56
NPC_ATK_DownRight_L2 = 57
NPC_ATK_UpHold_L2Hold = 58
NPC_ATK_UpLeftHold_L2Hold = 59
NPC_ATK_UpRightHold_L2Hold = 60
NPC_ATK_LeftHold_L2Hold = 61
NPC_ATK_RightHold_L2Hold = 62
NPC_ATK_DownHold_L2Hold = 63
NPC_ATK_DownLeftHold_L2Hold = 64
NPC_ATK_DownRightHold_L2Hold = 65
NPC_ATK_UpHold_L2Hold_R1 = 66
NPC_ATK_UpLeftHold_L2Hold_R1 = 67
NPC_ATK_UpRightHold_L2Hold_R1 = 68
NPC_ATK_LeftHold_L2Hold_R1 = 69
NPC_ATK_RightHold_L2Hold_R1 = 70
NPC_ATK_DownHold_L2Hold_R1 = 71
NPC_ATK_DownLeftHold_L2Hold_R1 = 72
NPC_ATK_DownRightHold_L2Hold_R1 = 73
NPC_ATK_UpHold_L2Hold_R2 = 74
NPC_ATK_UpLeftHold_L2Hold_R2 = 75
NPC_ATK_UpRightHold_L2Hold_R2 = 76
NPC_ATK_LeftHold_L2Hold_R2 = 77
NPC_ATK_RightHold_L2Hold_R2 = 78
NPC_ATK_DownHold_L2Hold_R2 = 79
NPC_ATK_DownLeftHold_L2Hold_R2 = 80
NPC_ATK_DownRightHold_L2Hold_R2 = 81
NPC_ATK_L1Hold_R1 = 82
NPC_ATK_L1Hold_R2 = 83
NPC_ATK_LadderUp = 90
NPC_ATK_LadderDown = 91
NPC_ATK_Gesture00 = 100 # Point Forward
NPC_ATK_Gesture01 = 101 # Point Up
NPC_ATK_Gesture02 = 102 # Point Down
NPC_ATK_Gesture03 = 103 # Wave
NPC_ATK_Gesture04 = 104 # Beckon
NPC_ATK_Gesture05 = 105 # Call Over
NPC_ATK_Gesture06 = 106 # Welcome
NPC_ATK_Gesture07 = 107 # Applause
NPC_ATK_Gesture08 = 108 # Quiet Resolve
NPC_ATK_Gesture09 = 109 # Jump for Joy
NPC_ATK_Gesture10 = 110 # Joy 
NPC_ATK_Gesture11 = 111 # Rejoice
NPC_ATK_Gesture12 = 112 # Hurrah
NPC_ATK_Gesture13 = 113 # Praise the sun
NPC_ATK_Gesture14 = 114 # My thanks!
NPC_ATK_Gesture15 = 115 # Bow
NPC_ATK_Gesture16 = 116 # Proper Bow
NPC_ATK_Gesture17 = 117 # Dignified Bow
NPC_ATK_Gesture18 = 118 # Duel Bow
NPC_ATK_Gesture19 = 119 # Legion Etiquette
NPC_ATK_Gesture20 = 120 # Darkmoon Loyalty
NPC_ATK_Gesture21 = 121 # By my sword
NPC_ATK_Gesture22 = 122 # Prayer
NPC_ATK_Gesture23 = 123 # Silent Ally
NPC_ATK_Gesture24 = 124 # Rest
NPC_ATK_Gesture25 = 125 # Collapse
NPC_ATK_Gesture26 = 126 # Patches Squat
NPC_ATK_Gesture27 = 127 # Prostration 
NPC_ATK_Gesture28 = 128 # Toast
NPC_ATK_Gesture29 = 129 # Sleep
NPC_ATK_Gesture30 = 130 # Curl up
NPC_ATK_Gesture31 = 131 # Stretch Out
NPC_ATK_Gesture32 = 132 # Path of the Dragon
NPC_ATK_Gesture33 = 133 # Unmannered Bow
NPC_ATK_Gesture34 = 134 # Shrug
NPC_ATK_Gesture35 = 135 # Dismissive Point
NPC_ATK_Gesture36 = 136 # Look Skyward
NPC_ATK_Gesture37 = 137 # Well! What is it!
NPC_ATK_Gesture38 = 138 # Praise the Heavens
NPC_ATK_Gesture39 = 139 # Retch
NPC_ATK_Gesture40 = 140 # Confused
NPC_ATK_NormalR = 0
NPC_ATK_LargeR = 1
NPC_ATK_PushR = 2
NPC_ATK_NormalL = 3
NPC_ATK_GuardL = 4
NPC_ATK_Parry = 5
NPC_ATK_Magic = 6
NPC_ATK_MagicL = NPC_ATK_Magic
NPC_ATK_Item = 7
NPC_ATK_SwitchWep = 8
NPC_ATK_StepF = 9
NPC_ATK_StepB = 10
NPC_ATK_StepL = 11
NPC_ATK_StepR = 12
NPC_ATK_ChangeWep_R1 = 13
NPC_ATK_ChangeWep_R2 = 14
NPC_ATK_ChangeWep_L1 = 15
NPC_ATK_ChangeWep_L2 = 16
NPC_ATK_BackstepF = 17
NPC_ATK_BackstepB = 18
NPC_ATK_BackstepL = 19
NPC_ATK_BackstepR = 20
NPC_ATK_MagicR = 21